<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.1.2">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'participant': ''}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="fileList" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1280, 800]" valType="code" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="$[0,0,0]" valType="str" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="click_baseline" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="PsychToolbox" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="debug" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <CodeComponent name="code_trial">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="class Point:&amp;#10;    &quot;&quot;&quot;&amp;#10;    Represents (x, y) coordinates in 2-dimensional space.&amp;#10;    &quot;&quot;&quot;&amp;#10;    def __init__(self, x, y):&amp;#10;        self.x = x&amp;#10;        self.y = y&amp;#10;    &amp;#10;    def __sub__(self, other):&amp;#10;        &quot;&quot;&quot;&amp;#10;        Returns the euclidean distance between this and the&amp;#10;        other passed point.&amp;#10;        &quot;&quot;&quot;&amp;#10;        dist = ((self.x - other.x)**2 + (self.y - other.y)**2)**(1/2)&amp;#10;        return dist&amp;#10;    &amp;#10;    def __str__(self):&amp;#10;        &quot;&quot;&quot;&amp;#10;        Returns string representation '(x, y)' of this point.&amp;#10;        &quot;&quot;&quot;&amp;#10;        return &quot;({}, {})&quot;.format(self.x, self.y)&amp;#10;    &amp;#10;    def __repr__(self):&amp;#10;        &quot;&quot;&quot;&amp;#10;        Returns description of how this point can be&amp;#10;        recreated.&amp;#10;        &quot;&quot;&quot;&amp;#10;        return &quot;Point({}, {})&quot;.format(self.x, self.y)&amp;#10;    &amp;#10;    def as_tuple(self):&amp;#10;        &quot;&quot;&quot;&amp;#10;        Returns a (x, y) tuple with this point's x/y coordinates.&amp;#10;        &quot;&quot;&quot;&amp;#10;        return self.x, self.y&amp;#10;&amp;#10;def points_collide(point_ls, new_point):&amp;#10;    &quot;&quot;&quot;&amp;#10;    Goes through a list of Point instances and compares&amp;#10;    the new_point to see if the new_point is too close&amp;#10;    to one of the points in the point_ls. Returns True if&amp;#10;    there is a collision, otherwise False.&amp;#10;    &quot;&quot;&quot;&amp;#10;    collides = False&amp;#10;    for old_point in point_ls:&amp;#10;        if (new_point - old_point) &lt; TARGET_SIZE_DEG:&amp;#10;            collides = True&amp;#10;            break&amp;#10;    return collides&amp;#10;&amp;#10;def gen_rand_point():&amp;#10;    &quot;&quot;&quot;&amp;#10;    Generates a random point within the target area.&amp;#10;    &quot;&quot;&quot;&amp;#10;    x_coord = randint(-AREA_WIDTH_DEG//2, AREA_WIDTH_DEG//2)&amp;#10;    y_coord = randint(-AREA_HEIGHT_DEG//2, AREA_HEIGHT_DEG//2)&amp;#10;    return Point(x_coord, y_coord)&amp;#10;&amp;#10;def gen_point_ls():&amp;#10;    &quot;&quot;&quot;&amp;#10;    Generate a list of (x, y) coordinate Point instances until&amp;#10;    there are as many instances as there should be targets/trial.&amp;#10;    &quot;&quot;&quot;&amp;#10;    point_ls = []&amp;#10;    while len(point_ls) &lt; NUM_TARGETS:&amp;#10;        new_point = gen_rand_point()&amp;#10;        if not points_collide(point_ls, new_point):&amp;#10;            point_ls.append(new_point)&amp;#10;    return point_ls&amp;#10;&amp;#10;def gen_trial_ls():&amp;#10;    &quot;&quot;&quot;&amp;#10;    Generates a list of lists, where each inner list corresponds to&amp;#10;    points describing the placements of all targets in a trial.&amp;#10;    &quot;&quot;&quot;&amp;#10;    trial_ls = []&amp;#10;    while len(trial_ls) &lt; NUM_TRIALS:&amp;#10;        point_ls = gen_point_ls()&amp;#10;        trial_ls.append(point_ls)&amp;#10;    return trial_ls&amp;#10;&amp;#10;trial_ls = gen_trial_ls()&amp;#10;&amp;#10;# generate one TextStim instance for each target&amp;#10;# (numbering starting from 1)&amp;#10;targets = []&amp;#10;for i in range(1, NUM_TARGETS+1):&amp;#10;    new_target = visual.TextStim(&amp;#10;        win=win, &amp;#10;        name='text_target_{}'.format(i),&amp;#10;        text='{}'.format(i),&amp;#10;        font='Arial',&amp;#10;        units='deg', &amp;#10;        pos=(0, 0), &amp;#10;        height=TARGET_SIZE_DEG, &amp;#10;        wrapWidth=None, ori=0, &amp;#10;        color=TARGET_NEUTRAL_COL, &amp;#10;        colorSpace='rgb', &amp;#10;        opacity=1, &amp;#10;        languageStyle='LTR',&amp;#10;        depth=-1.0)&amp;#10;    targets.append(new_target)&amp;#10;&amp;#10;# initialize trial counter&amp;#10;trial_counter = 0" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# fetch the list of Point instances representing the&amp;#10;# (x, y) coordinates that are to be used for targets&amp;#10;# during this trial&amp;#10;point_ls = trial_ls[trial_counter]&amp;#10;&amp;#10;# assign positions to the targets and reset their&amp;#10;# colors to white&amp;#10;for i, target in enumerate(targets):&amp;#10;    target.pos = point_ls[i].as_tuple()&amp;#10;    target.color = TARGET_NEUTRAL_COL&amp;#10;&amp;#10;# make a shallow copy of the targets list that keeps&amp;#10;# track of which targets haven't been clicked on yet&amp;#10;nonclicked_targets = targets[:]&amp;#10;&amp;#10;# set first target to be clicked&amp;#10;click_target = nonclicked_targets.pop(0)&amp;#10;&amp;#10;# reset list of times when clicks occur&amp;#10;response_times = []&amp;#10;&amp;#10;# fetch the routine start time&amp;#10;trial_start_time = globalClock.getTime()&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="# draw all of the targets&amp;#10;for target in targets:&amp;#10;    target.draw()&amp;#10;&amp;#10;# check if mouse button has been clicked, and if so,&amp;#10;# if any of the targets were clicked&amp;#10;buttons = mouse_trial.getPressed()&amp;#10;if buttons != prevButtonState:  # button state changed?&amp;#10;    prevButtonState = buttons&amp;#10;    if sum(buttons) &gt; 0:  # state changed to a new click&amp;#10;        # check if the mouse was inside of target&amp;#10;        if click_target.contains(mouse_trial):&amp;#10;            # change color of target to indicate it's been clicked&amp;#10;            click_target.color = TARGET_CLICKED_COL&amp;#10;            # save the click time&amp;#10;            response_times.append(trialClock.getTime())&amp;#10;            # if there are targets left to click, make the next target in line clickable&amp;#10;            # otherwise, end the routine&amp;#10;            if len(nonclicked_targets) &gt; 0:&amp;#10;                click_target = nonclicked_targets.pop(0)&amp;#10;            else:&amp;#10;                continueRoutine = False&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="for (var target, _pj_c = 0, _pj_a = targets, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    target = _pj_a[_pj_c];&amp;#10;    target.draw();&amp;#10;}&amp;#10;buttons = mouse_trial.getPressed();&amp;#10;if ((buttons !== prevButtonState)) {&amp;#10;    prevButtonState = buttons;&amp;#10;    if ((sum(buttons) &gt; 0)) {&amp;#10;        if (click_target.contains(mouse_trial)) {&amp;#10;            click_target.color = TARGET_CLICKED_COL;&amp;#10;            response_times.append(trialClock.getTime());&amp;#10;            if ((nonclicked_targets.length &gt; 0)) {&amp;#10;                click_target = nonclicked_targets.pop(0);&amp;#10;            } else {&amp;#10;                continueRoutine = false;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="trials.addData(&quot;response_times&quot;, response_times);&amp;#10;trials.addData(&quot;trial_start_time&quot;, trial_start_time);&amp;#10;trial_counter += 1;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# save trial data&amp;#10;trials.addData('response_times', response_times)&amp;#10;trials.addData('trial_start_time', trial_start_time)&amp;#10;&amp;#10;# increment trial counter&amp;#10;trial_counter += 1&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_trial" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <MouseComponent name="mouse_trial">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse_trial" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="instructions">
      <TextComponent name="text_instructions">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="TXT_SIZE_M" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_instructions" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Din uppgift i det här testet är att så snabbt du kan klicka med musen på samtliga siffror som kommer upp på skärmen i nummordning. Klicka alltså på alla siffrorna, i ordningen 1, 2, 3, 4… 9.&amp;#10;&amp;#10;Använd vänster musknapp.&amp;#10;&amp;#10;Testet tar ca 3 minuter att genomföra." valType="extendedStr" updates="constant" name="text"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="25" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="mouse_instructions">
        <Param val="text_go" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse_instructions" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.5" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <TextComponent name="text_go">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="TXT_SIZE_S" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_go" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -6)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Klicka här när du läst klart för att börja testet" valType="extendedStr" updates="constant" name="text"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="25" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_constants">
        <Param val="### SET EXPERIMENT CONSTANTS ###&amp;#10;# width/height of area where targets&amp;#10;# can appear, in degrees&amp;#10;AREA_WIDTH_DEG = 14&amp;#10;AREA_HEIGHT_DEG = 14&amp;#10;&amp;#10;# target text (digit) size, in degrees&amp;#10;TARGET_SIZE_DEG = 1.5&amp;#10;# target text neutral (non-clicked) color&amp;#10;TARGET_NEUTRAL_COL = &quot;#FFFFFF&quot;&amp;#10;# target text clicked color&amp;#10;TARGET_CLICKED_COL = &quot;#BBFFBB&quot;&amp;#10;&amp;#10;# large/medium/small instructions text size,&amp;#10;# in degrees&amp;#10;TXT_SIZE_L = 2&amp;#10;TXT_SIZE_M = 0.8&amp;#10;TXT_SIZE_S = 0.6&amp;#10;&amp;#10;# number of trials to run&amp;#10;NUM_TRIALS = 3&amp;#10;&amp;#10;# number of targets (digits/numbers) to use, ie how many&amp;#10;# targets to show per trial. target numbering always&amp;#10;# starts from 1.&amp;#10;NUM_TARGETS = 9&amp;#10;&amp;#10;### END SET EXPERIMENT CONSTANTS ###" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="AREA_WIDTH_DEG = 14;&amp;#10;AREA_HEIGHT_DEG = 14;&amp;#10;TARGET_SIZE_DEG = 1.5;&amp;#10;TARGET_NEUTRAL_COL = &quot;#FFFFFF&quot;;&amp;#10;TARGET_CLICKED_COL = &quot;#BBFFBB&quot;;&amp;#10;TXT_SIZE_L = 2;&amp;#10;TXT_SIZE_M = 0.8;&amp;#10;TXT_SIZE_S = 0.6;&amp;#10;NUM_TRIALS = 3;&amp;#10;NUM_TARGETS = 9;&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_constants" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="end_routine">
      <TextComponent name="text_end">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="TXT_SIZE_M" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_end" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Bra jobbat! &amp;#10;&amp;#10;Mata in ditt deltagar-ID för kalibreringen som kommer härnäst." valType="extendedStr" updates="constant" name="text"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="26" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="instructions"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="NUM_TRIALS" valType="code"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial"/>
    <LoopTerminator name="trials"/>
    <Routine name="end_routine"/>
  </Flow>
</PsychoPy2experiment>
